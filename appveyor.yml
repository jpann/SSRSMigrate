init:
- git config --global core.autocrlf false

version: 1.1.0.{build}-{branch}

skip_tags: true

install:
  - choco install gitversion.portable -pre -y

skip_commits:
  files:
    - '**/*.md'
    - '**/.rdl'

image: Visual Studio 2015

assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}'

environment:
  COVERALLS_REPO_TOKEN:
    secure: kv0pn7M34ca0KP8NlRekeusUa+Uj325NlZOhMNnK1EPW2cudunWXbZ/igtRouTnC

before_build:
  - nuget restore "SSRSMigrate\SSRSMigrate.sln"
  - ps: gitversion /l console /output buildserver /updateAssemblyInfo

configuration:
  - Debug

build:
  project: SSRSMigrate\SSRSMigrate.sln
  verbosity: minimal

test:
  assemblies:
    except:
      - SSRSMigrate.IntegrationTests.dll

after_test:
  - cd %APPVEYOR_BUILD_FOLDER%
  - nuget install NUnit.ConsoleRunner -OutputDirectory packages -Version 3.9.0
  - nuget install OpenCover -OutputDirectory packages -Version 4.6.519
  - dotnet tool install coveralls.net --version 1.0.0 --tool-path tools
  - .\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user -filter:"+[SSRSMigrate.Tests*]*" -target:".\packages\NUnit.ConsoleRunner.3.9.0\tools\nunit3-console.exe" -targetargs:"/domain:single SSRSMigrate\SSRSMigrate.Tests\bin\%CONFIGURATION%\SSRSMigrate.Tests.dll" -output:coverage.xml
  - .\tools\csmacnz.coveralls.exe --opencover -i coverage.xml --repoToken %COVERALLS_REPO_TOKEN%

after_build:
  - cmd: cd SSRSMigrate\SSRSMigrate\bin\%CONFIGURATION%\
  - cmd: 7z a C:\projects\ssrsmigrate\SSRSMigrate-%GitVersion_MajorMinorPatch%.zip *.* -x!*.pdb -x!*.vhost.*

artifacts:
  - path: SSRSMigrate-%GitVersion_MajorMinorPatch%.zip
    name: SSRSMigrate

deploy:
  - provider: GitHub
    auth_token:
      secure: EXRr3SxM7c0kVhOc5HAyMr4gUaCJA11QE/RbTNrqYil9WXKDqoQoigCfdD6ZjhDX # encrypted token from GitHub
    artifact: SSRSMigrate-$(GitVersion_MajorMinorPatch).zip          
    description: SSRSMigrate build %APPVEYOR_BUILD_VERSION%.
    draft: false
    prerelease: true
    tag: $(GitVersion_MajorMinorPatch)
    on:
      branch: master                # release from master branch only